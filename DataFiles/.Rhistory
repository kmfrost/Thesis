setwd
setwd("Datafiles")
getwd
getwd()
data <- read.csv("trai_norm_email_features_100.csv")
data
library("FSelector", lib.loc="~/R/win-library/3.2")
data(iris)
weights <- information.gain(Species!., iris)
weights <- information.gain(Species~., iris)
weights
weights <- information.gain(Status~., data)
weights
weights <- information.gain(Status~fg_degree, data)
weights
weights <- information.gain(Status~unique_addresses_sent, data)
all_data <- data
all_data
data <- subset(data, -c(pid, Status))
data <- subset(data, select=-c(pid, Status))
data
no_pids <- subset(all_data, select=-c(pid))
no_pids
weights <- information.gain(Status~., no_pids)
weights
all_data$fg_degree, all_data$Status
asdf <- subset(all_data, select=c(fg_degree, Status))
asdf
qwer <- asdf[order(fg_degree),]
asdf
qwer <- asdf[order(fg_degree),]
qwer <- asdf[order(Status),]
qwer <- asdf[order(fg_degree),]
qwer <- asdf[order(asdf$fg_degree),]
qwer
weights <- information.gain(Status~., asdf)
weights
weights <- information.gain(Status~., no_pids)
print(weights)
asdf <- subset(all_data, select=c(avg_attachments_sent, Status))
asdf
qwer <- asdf[order(asdf$avg_attachments_sent),]
qwer
weights <- information.gain(Status~., no_pids)
weights <- information.gain(Status~., asdf)
weights
weights <- gain.ratio(Status~., no_pids)
weights
weights <- symmetrical.uncertainty(Status~., no_pids)
weights
weights <- weights[order(attr_importance),]
weights <- weights[order(weights$attr_importance),]
weights
weights <- symmetrical.uncertainty(Status~., no_pids)
asdf <- weights[order(weights$attr_importance),]
asdf
attach(weights)
asdf <- weights[order(attr_importance),]
asdf
detach(weights)
asdf <- weights[order(attr_importance),]
weights<- weights[order(weights[,attr_importance]),]
weights[order(weights[,attr_importance]),]
weights[order(weights[,attr_importance]),]
weights
weights[with(weights, order("attr_importance")),]
weights
weights <- weights[with(weights, order("attr_importance")),]
weights
weights <- information.gain(Status~., asdf)
weights <- information.gain(Status~., no_pids)
weights
weights[ order(weights[,"attr_importance"]),]
weights[ order(weights["attr_importance"]),]
attach(weights)
sort.asdf <- weights[order(attr_importance),]
sort.asdf
sort.asdf[.]
sort.asdf[,]
sort.asdf[1:15,]
sort.asdf
sort.asdf <- weights[-order(attr_importance),]
sort.asdf
sort.asdf <- weights[order(-attr_importance),]
sort.asdf
weights
problems <- subset(no_pids, select=c(total_sent, unique_addresses_Sent))
problems <- subset(no_pids, select=c(total_sent, unique_addresses_sent,unique_subjects_sent, unique_sub_sent_perc,unique_addresses_received,unique_add_rec_perc,unique_subjects_received,total_emails,total_sent_signed,total_sent_signed_perc,sent_to,inter_vt_sent,inter_hume_sent,rec_to,avg_recipients_rec,avg_body_chars_sent,after_hours_sent,avg_attachments_sent,avg_attachments_rec,fg_between_centrality,pg_clustering,pg_closeness_centrality,fg_degree_centrality,pg_current_flow_betweenness_centrality,fg_communicability_centrality,pg_square_clustering))
problems
problems <- subset(no_pids, select=c(total_sent, unique_addresses_sent,unique_subjects_sent, unique_sub_sent_perc,unique_addresses_received,unique_add_rec_perc,unique_subjects_received,total_emails,total_sent_signed,total_sent_signed_perc,sent_to,inter_vt_sent,inter_hume_sent,rec_to,avg_recipients_rec,avg_body_chars_sent,after_hours_sent,avg_attachments_sent,avg_attachments_rec,fg_between_centrality,pg_clustering,pg_closeness_centrality,fg_degree_centrality,pg_current_flow_betweenness_centrality,fg_communicability_centrality,pg_square_clustering, Status))
problems
weights<-information.gain(Status~., problems)
weights
problems <- subset(no_pids, select=c(total_sent, unique_addresses_sent,unique_subjects_sent, unique_sub_sent_perc,unique_addresses_received,unique_add_rec_perc,unique_subjects_received,total_emails,total_sent_signed,total_sent_signed_perc,sent_to,inter_vt_sent,rec_to,avg_recipients_rec,avg_body_chars_sent,after_hours_sent,avg_attachments_sent,avg_attachments_rec,fg_between_centrality,pg_clustering,pg_closeness_centrality,fg_degree_centrality,pg_current_flow_betweenness_centrality,fg_communicability_centrality,pg_square_clustering, Status))
weights<-information.gain(Status~., problems)
weights
library("entropy", lib.loc="~/R/win-library/3.2")
entropy(Status)
dettach(weights)
detach(weights)
entropy(probelms$Status)
entropy(problems$Status)
freqs <- table(problems$Status)/length(problems$Status)
freqs
entropy(freqs)
info(freqs)
freqs <- table(problems$Status)
freqs
entropy(freqs)
entropy(freqs, unit=bits)
entropy(freqs, unit="log2")
problems
asdf <- subset(all_data, select=c(total_sent, Status))
qwer <- asdf[order(asdf$total_sent),]
qwer
freqs <- table(problems$Status)
entropy(freqs, unit="log2")
weights <- information.gain(asdf)
weights
weights <- information.gain(Status~., asdf)
weights
asdf
qwer
split1 <- subset(qwer, total_sent<0.005)
split1
split2 <- subset(qwer, total_sent>0.005)
weights1 <- information.gain(Status.~, split1)
split1
weights1 <- information.gain(Status~., split1)
weights1
weights2 <- information.gain(Status~., split2)
weights2
freq1 <- table(split1$Table)
freq1
freqs <- table(split1$Status)
freq1 <- table(split1$Status)
freq1
freq2 <- table(split2$Status)
freq2
entropy(freq1, unit='log2')
entropy(freq2, unit='log2')
freqs <- table(qwer$Status)
entropy(freqs, unit='log2')
sum(freq1)
sum(freq2)
random.forest.importance(Status~., no_pids)
random.forest.importance(Status~., no_pids, importance.type=2)
entropy(freq1, unit='log2')
entropy(freq2, unit='log2')
entropy(freqs, unit='log2')
weights<-information.gain(Status~total_sent, qwer)
weights
asdf<-subset(no_pids, select=c(rec_fw, Status))
asdf
qwer <- asdf[order(asdf$rec_fw),]
qwer
weights
weights <- information.gain(Status~., no_pids)
weights
natstobits(0.3596259)
install.packages("infotheo")
library("infotheo", lib.loc="~/R/win-library/3.2")
natstobits(0.3596259)
random.forest.importance(Status~., no_pids, importance.type=2)
correct<- random.forest.importance(Status~., no_pids, importance.type=2)
correct_sort <- correct[order(correct$attr_importance),]
correct_sort
correct_sort <- correct[order(correct$attr_importance,),]
correct_sort <- correct[,order(correct$attr_importance)]
correct_sort <- correct[order(,correct$attr_importance)]
correct_sort <- correct[order(attr_importance)]
correct_sort <- correct[order(attr_importance),]
correct_sort <- correct[order("attr_importance"),]
correct_sort
correct_sort <- correct[order("attr_importance")]
correct_sort
correct_sort <- correct[order(correct$attr_importance),]
correct_sort
print(correct_sort)
type(correct)
typeof(correct)
correct
sort(correct)
order(correct)
correct
sort.list(correct)
correct[order(correct)]
correct_sort <- correct[order(correct$attr_importance)]
correct<- random.forest.importance(Status~., no_pids, importance.type=1)
correct
correct<- random.forest.importance(Status~., no_pids, importance.type=2)
sort(correct)
sort(correct$attr_importance)
correct[sort(correct$attr_importance)]
order(correct)
type(correct)
typeof(correct)
typeof(correct$attr_importance)
correct[order(correct)]
correct[order(correct),]
correct_sort<-correct[order(unlist(correct))]
correct_sort<-correct[order(unlist(correct), decreasing=TRUE)]
correct_sort<-correct[order(unlist(correct$attr_importance), decreasing=TRUE)]
sort(unlist(correct))
sort.list(correct)
correct[sort.list(unlist(correct))]
correct_df <- data.frame(matrix(unlist(correct)))
correct_df
correct
do.call(rbind.data.frame, correct)
correct
typeof(correct)
asdf <-do.call(rbind.data.frame, correct)
asdf
library(plyr)
install.packages("plyr")
library("plyr", lib.loc="~/R/win-library/3.2")
df <- ldply(correct, data.frame)
df
correct<- random.forest.importance(Status~., no_pids, importance.type=2)
correct
data.frame(t(sapply(correct,c)))
correct
weights <- information.gain(Status~., no_pids)
weights
correct<- random.forest.importance(Status~., no_pids, importance.type=2)
correct
weights
sort
min(weights)
weights[order(weights$attr_importance)]
order(weights$attr_importance)
weights[order(weights$attr_importance)]
typeof(weights)
weights[2]
weights$attr_importance[2]
weights$attr_importance[order[weights$attr_importance]]
weights$attr_importance[order[weights$attr_importance],]
weights$attr_importance(order[weights$attr_importance])
weights$attr_importance[order[weights$attr_importance]]
data.frame(t(sapply(correct,c)))
typeof(weights)
weights
